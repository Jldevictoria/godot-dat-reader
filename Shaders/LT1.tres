[gd_resource type="VisualShader" load_steps=12 format=3 uid="uid://ba2lih7pjbj3v"]

[sub_resource type="VisualShaderNodeVectorOp" id="1"]
default_input_values = [0, Vector3(1, 1, 1), 1, Vector3(0, 0, 0)]
operator = 2

[sub_resource type="VisualShaderNodeIf" id="10"]
default_input_values = [0, 0.0, 1, 1.0, 2, 1e-05, 3, Vector3(0, 0, 0), 4, Vector3(0, 0, 0), 5, Vector3(0, 0, 0)]

[sub_resource type="VisualShaderNodeFloatParameter" id="11"]
parameter_name = "use_lightmap"

[sub_resource type="VisualShaderNodeTexture2DParameter" id="2"]
output_port_for_preview = 0
parameter_name = "main_texture"

[sub_resource type="VisualShaderNodeInput" id="3"]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id="4"]
output_port_for_preview = 0
input_name = "uv2"

[sub_resource type="VisualShaderNodeTexture2DParameter" id="5"]
output_port_for_preview = 0
parameter_name = "lm_texture"

[sub_resource type="VisualShaderNodeVectorOp" id="6"]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeInput" id="7"]
output_port_for_preview = 0
input_name = "color"

[sub_resource type="VisualShaderNodeVectorOp" id="8"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1)]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id="9"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1)]

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx, vertex_lighting;

uniform sampler2D main_texture;
uniform float use_lightmap;
uniform sampler2D lm_texture;



void fragment() {
// FloatParameter:12
	float n_out12p0 = use_lightmap;


// VectorOp:8
	vec3 n_in8p1 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out8p0 =  * n_in8p1;


// Input:7
	vec4 n_out7p0 = COLOR;


// VectorOp:9
	vec3 n_in9p1 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out9p0 = vec3(n_out7p0.xyz) + n_in9p1;


// VectorOp:10
	vec3 n_out10p0 = n_out8p0 * n_out9p0;


	vec3 n_out11p0;
// If:11
	float n_in11p1 = 1.00000;
	float n_in11p2 = 0.00001;
	if(abs(n_out12p0 - n_in11p1) < n_in11p2)
	{
		n_out11p0 = n_out10p0;
	}
	else if(n_out12p0 < n_in11p1)
	{
		n_out11p0 = vec3(n_out7p0.xyz);
	}
	else
	{
		n_out11p0 = vec3(n_out7p0.xyz);
	}


// VectorOp:6
	vec3 n_out6p0 =  * n_out11p0;


// Output:0
	ALBEDO = n_out6p0;


}
"
flags/vertex_lighting = true
nodes/fragment/0/position = Vector2(340, 120)
nodes/fragment/2/node = SubResource("2")
nodes/fragment/2/position = Vector2(-640, 80)
nodes/fragment/3/node = SubResource("3")
nodes/fragment/3/position = Vector2(-1360, 140)
nodes/fragment/4/node = SubResource("4")
nodes/fragment/4/position = Vector2(-1360, 480)
nodes/fragment/5/node = SubResource("5")
nodes/fragment/5/position = Vector2(-940, 420)
nodes/fragment/6/node = SubResource("6")
nodes/fragment/6/position = Vector2(120, 120)
nodes/fragment/7/node = SubResource("7")
nodes/fragment/7/position = Vector2(-960, 900)
nodes/fragment/8/node = SubResource("8")
nodes/fragment/8/position = Vector2(-600, 400)
nodes/fragment/9/node = SubResource("9")
nodes/fragment/9/position = Vector2(-540, 680)
nodes/fragment/10/node = SubResource("1")
nodes/fragment/10/position = Vector2(-300, 520)
nodes/fragment/11/node = SubResource("10")
nodes/fragment/11/position = Vector2(-120, 780)
nodes/fragment/12/node = SubResource("11")
nodes/fragment/12/position = Vector2(-560, 1020)
nodes/fragment/connections = PackedInt32Array(2, 0, 6, 0, 6, 0, 0, 0, 7, 0, 9, 0, 9, 0, 10, 1, 8, 0, 10, 0, 5, 0, 8, 0, 10, 0, 11, 3, 11, 0, 6, 1, 7, 0, 11, 5, 7, 0, 11, 4, 12, 0, 11, 0)
